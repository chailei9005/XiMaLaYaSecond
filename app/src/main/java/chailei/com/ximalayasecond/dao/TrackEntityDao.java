package chailei.com.ximalayasecond.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import chailei.com.ximalayasecond.entitys.TrackEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_ENTITY".
*/
public class TrackEntityDao extends AbstractDao<TrackEntity, Long> {

    public static final String TABLENAME = "TRACK_ENTITY";

    /**
     * Properties of entity TrackEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TrackId = new Property(0, Long.class, "trackId", true, "TRACK_ID");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property PlayUrl64 = new Property(2, String.class, "playUrl64", false, "PLAY_URL64");
        public final static Property PlayUrl32 = new Property(3, String.class, "playUrl32", false, "PLAY_URL32");
        public final static Property DownloadUrl = new Property(4, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property PlayPathAacv164 = new Property(5, String.class, "playPathAacv164", false, "PLAY_PATH_AACV164");
        public final static Property PlayPathAacv224 = new Property(6, String.class, "playPathAacv224", false, "PLAY_PATH_AACV224");
        public final static Property DownloadAacUrl = new Property(7, String.class, "downloadAacUrl", false, "DOWNLOAD_AAC_URL");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Duration = new Property(9, Integer.class, "duration", false, "DURATION");
        public final static Property AlbumId = new Property(10, Long.class, "albumId", false, "ALBUM_ID");
        public final static Property ProcessState = new Property(11, Integer.class, "processState", false, "PROCESS_STATE");
        public final static Property CreatedAt = new Property(12, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property CoverSmall = new Property(13, String.class, "coverSmall", false, "COVER_SMALL");
        public final static Property CoverMiddle = new Property(14, String.class, "coverMiddle", false, "COVER_MIDDLE");
        public final static Property CoverLarge = new Property(15, String.class, "coverLarge", false, "COVER_LARGE");
        public final static Property Nickname = new Property(16, String.class, "nickname", false, "NICKNAME");
        public final static Property UserSource = new Property(17, Integer.class, "userSource", false, "USER_SOURCE");
        public final static Property OrderNum = new Property(18, Integer.class, "orderNum", false, "ORDER_NUM");
        public final static Property IsPublic = new Property(19, Boolean.class, "isPublic", false, "IS_PUBLIC");
        public final static Property Likes = new Property(20, Integer.class, "likes", false, "LIKES");
        public final static Property Playtimes = new Property(21, Integer.class, "playtimes", false, "PLAYTIMES");
        public final static Property Comments = new Property(22, Integer.class, "comments", false, "COMMENTS");
        public final static Property Shares = new Property(23, Integer.class, "shares", false, "SHARES");
        public final static Property DownloadSize = new Property(24, Integer.class, "downloadSize", false, "DOWNLOAD_SIZE");
        public final static Property DownloadAacSize = new Property(25, Integer.class, "downloadAacSize", false, "DOWNLOAD_AAC_SIZE");
    };


    public TrackEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TrackEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_ENTITY\" (" + //
                "\"TRACK_ID\" INTEGER PRIMARY KEY ," + // 0: trackId
                "\"UID\" INTEGER," + // 1: uid
                "\"PLAY_URL64\" TEXT," + // 2: playUrl64
                "\"PLAY_URL32\" TEXT," + // 3: playUrl32
                "\"DOWNLOAD_URL\" TEXT," + // 4: downloadUrl
                "\"PLAY_PATH_AACV164\" TEXT," + // 5: playPathAacv164
                "\"PLAY_PATH_AACV224\" TEXT," + // 6: playPathAacv224
                "\"DOWNLOAD_AAC_URL\" TEXT," + // 7: downloadAacUrl
                "\"TITLE\" TEXT," + // 8: title
                "\"DURATION\" INTEGER," + // 9: duration
                "\"ALBUM_ID\" INTEGER," + // 10: albumId
                "\"PROCESS_STATE\" INTEGER," + // 11: processState
                "\"CREATED_AT\" INTEGER," + // 12: createdAt
                "\"COVER_SMALL\" TEXT," + // 13: coverSmall
                "\"COVER_MIDDLE\" TEXT," + // 14: coverMiddle
                "\"COVER_LARGE\" TEXT," + // 15: coverLarge
                "\"NICKNAME\" TEXT," + // 16: nickname
                "\"USER_SOURCE\" INTEGER," + // 17: userSource
                "\"ORDER_NUM\" INTEGER," + // 18: orderNum
                "\"IS_PUBLIC\" INTEGER," + // 19: isPublic
                "\"LIKES\" INTEGER," + // 20: likes
                "\"PLAYTIMES\" INTEGER," + // 21: playtimes
                "\"COMMENTS\" INTEGER," + // 22: comments
                "\"SHARES\" INTEGER," + // 23: shares
                "\"DOWNLOAD_SIZE\" INTEGER," + // 24: downloadSize
                "\"DOWNLOAD_AAC_SIZE\" INTEGER);"); // 25: downloadAacSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrackEntity entity) {
        stmt.clearBindings();
 
        Long trackId = entity.getTrackId();
        if (trackId != null) {
            stmt.bindLong(1, trackId);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
 
        String playUrl64 = entity.getPlayUrl64();
        if (playUrl64 != null) {
            stmt.bindString(3, playUrl64);
        }
 
        String playUrl32 = entity.getPlayUrl32();
        if (playUrl32 != null) {
            stmt.bindString(4, playUrl32);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(5, downloadUrl);
        }
 
        String playPathAacv164 = entity.getPlayPathAacv164();
        if (playPathAacv164 != null) {
            stmt.bindString(6, playPathAacv164);
        }
 
        String playPathAacv224 = entity.getPlayPathAacv224();
        if (playPathAacv224 != null) {
            stmt.bindString(7, playPathAacv224);
        }
 
        String downloadAacUrl = entity.getDownloadAacUrl();
        if (downloadAacUrl != null) {
            stmt.bindString(8, downloadAacUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(10, duration);
        }
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(11, albumId);
        }
 
        Integer processState = entity.getProcessState();
        if (processState != null) {
            stmt.bindLong(12, processState);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(13, createdAt.getTime());
        }
 
        String coverSmall = entity.getCoverSmall();
        if (coverSmall != null) {
            stmt.bindString(14, coverSmall);
        }
 
        String coverMiddle = entity.getCoverMiddle();
        if (coverMiddle != null) {
            stmt.bindString(15, coverMiddle);
        }
 
        String coverLarge = entity.getCoverLarge();
        if (coverLarge != null) {
            stmt.bindString(16, coverLarge);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(17, nickname);
        }
 
        Integer userSource = entity.getUserSource();
        if (userSource != null) {
            stmt.bindLong(18, userSource);
        }
 
        Integer orderNum = entity.getOrderNum();
        if (orderNum != null) {
            stmt.bindLong(19, orderNum);
        }
 
        Boolean isPublic = entity.getIsPublic();
        if (isPublic != null) {
            stmt.bindLong(20, isPublic ? 1L: 0L);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(21, likes);
        }
 
        Integer playtimes = entity.getPlaytimes();
        if (playtimes != null) {
            stmt.bindLong(22, playtimes);
        }
 
        Integer comments = entity.getComments();
        if (comments != null) {
            stmt.bindLong(23, comments);
        }
 
        Integer shares = entity.getShares();
        if (shares != null) {
            stmt.bindLong(24, shares);
        }
 
        Integer downloadSize = entity.getDownloadSize();
        if (downloadSize != null) {
            stmt.bindLong(25, downloadSize);
        }
 
        Integer downloadAacSize = entity.getDownloadAacSize();
        if (downloadAacSize != null) {
            stmt.bindLong(26, downloadAacSize);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrackEntity readEntity(Cursor cursor, int offset) {
        TrackEntity entity = new TrackEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // trackId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // playUrl64
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // playUrl32
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // playPathAacv164
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // playPathAacv224
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // downloadAacUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // duration
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // albumId
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // processState
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // createdAt
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // coverSmall
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // coverMiddle
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // coverLarge
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // nickname
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // userSource
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // orderNum
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isPublic
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // likes
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // playtimes
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // comments
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // shares
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // downloadSize
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25) // downloadAacSize
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrackEntity entity, int offset) {
        entity.setTrackId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPlayUrl64(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlayUrl32(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDownloadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlayPathAacv164(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlayPathAacv224(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownloadAacUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDuration(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAlbumId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setProcessState(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCreatedAt(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCoverSmall(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCoverMiddle(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCoverLarge(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setNickname(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserSource(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setOrderNum(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIsPublic(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setLikes(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setPlaytimes(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setComments(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setShares(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setDownloadSize(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setDownloadAacSize(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrackEntity entity, long rowId) {
        entity.setTrackId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrackEntity entity) {
        if(entity != null) {
            return entity.getTrackId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
