package chailei.com.ximalayasecond.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import chailei.com.ximalayasecond.entitys.AlbumEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALBUM_ENTITY".
*/
public class AlbumEntityDao extends AbstractDao<AlbumEntity, Long> {

    public static final String TABLENAME = "ALBUM_ENTITY";

    /**
     * Properties of entity AlbumEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AlbumId = new Property(0, Long.class, "albumId", true, "ALBUM_ID");
        public final static Property CategoryId = new Property(1, Integer.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property CoverOrigin = new Property(3, String.class, "coverOrigin", false, "COVER_ORIGIN");
        public final static Property CoverSmall = new Property(4, String.class, "coverSmall", false, "COVER_SMALL");
        public final static Property CoverMiddle = new Property(5, String.class, "coverMiddle", false, "COVER_MIDDLE");
        public final static Property CoverLarge = new Property(6, String.class, "coverLarge", false, "COVER_LARGE");
        public final static Property CoverWebLarge = new Property(7, String.class, "coverWebLarge", false, "COVER_WEB_LARGE");
        public final static Property CreatedAt = new Property(8, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(9, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Uid = new Property(10, Long.class, "uid", false, "UID");
        public final static Property Nickname = new Property(11, String.class, "nickname", false, "NICKNAME");
        public final static Property IsVerified = new Property(12, Boolean.class, "isVerified", false, "IS_VERIFIED");
        public final static Property AvatarPath = new Property(13, String.class, "avatarPath", false, "AVATAR_PATH");
        public final static Property Intro = new Property(14, String.class, "intro", false, "INTRO");
        public final static Property IntroRich = new Property(15, String.class, "introRich", false, "INTRO_RICH");
        public final static Property Tags = new Property(16, String.class, "tags", false, "TAGS");
        public final static Property Shares = new Property(17, Integer.class, "shares", false, "SHARES");
        public final static Property HasNew = new Property(18, Boolean.class, "hasNew", false, "HAS_NEW");
        public final static Property IsFavorite = new Property(19, Boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property PlayTimes = new Property(20, Integer.class, "playTimes", false, "PLAY_TIMES");
        public final static Property Status = new Property(21, Integer.class, "status", false, "STATUS");
        public final static Property SerializeStatus = new Property(22, Integer.class, "serializeStatus", false, "SERIALIZE_STATUS");
        public final static Property SerialState = new Property(23, Integer.class, "serialState", false, "SERIAL_STATE");
        public final static Property PlayTrackId = new Property(24, Integer.class, "playTrackId", false, "PLAY_TRACK_ID");
        public final static Property IsRecordDesc = new Property(25, Boolean.class, "isRecordDesc", false, "IS_RECORD_DESC");
    };


    public AlbumEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AlbumEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALBUM_ENTITY\" (" + //
                "\"ALBUM_ID\" INTEGER PRIMARY KEY ," + // 0: albumId
                "\"CATEGORY_ID\" INTEGER," + // 1: categoryId
                "\"TITLE\" TEXT," + // 2: title
                "\"COVER_ORIGIN\" TEXT," + // 3: coverOrigin
                "\"COVER_SMALL\" TEXT," + // 4: coverSmall
                "\"COVER_MIDDLE\" TEXT," + // 5: coverMiddle
                "\"COVER_LARGE\" TEXT," + // 6: coverLarge
                "\"COVER_WEB_LARGE\" TEXT," + // 7: coverWebLarge
                "\"CREATED_AT\" INTEGER," + // 8: createdAt
                "\"UPDATED_AT\" INTEGER," + // 9: updatedAt
                "\"UID\" INTEGER," + // 10: uid
                "\"NICKNAME\" TEXT," + // 11: nickname
                "\"IS_VERIFIED\" INTEGER," + // 12: isVerified
                "\"AVATAR_PATH\" TEXT," + // 13: avatarPath
                "\"INTRO\" TEXT," + // 14: intro
                "\"INTRO_RICH\" TEXT," + // 15: introRich
                "\"TAGS\" TEXT," + // 16: tags
                "\"SHARES\" INTEGER," + // 17: shares
                "\"HAS_NEW\" INTEGER," + // 18: hasNew
                "\"IS_FAVORITE\" INTEGER," + // 19: isFavorite
                "\"PLAY_TIMES\" INTEGER," + // 20: playTimes
                "\"STATUS\" INTEGER," + // 21: status
                "\"SERIALIZE_STATUS\" INTEGER," + // 22: serializeStatus
                "\"SERIAL_STATE\" INTEGER," + // 23: serialState
                "\"PLAY_TRACK_ID\" INTEGER," + // 24: playTrackId
                "\"IS_RECORD_DESC\" INTEGER);"); // 25: isRecordDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALBUM_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlbumEntity entity) {
        stmt.clearBindings();
 
        Long albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindLong(1, albumId);
        }
 
        Integer categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(2, categoryId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String coverOrigin = entity.getCoverOrigin();
        if (coverOrigin != null) {
            stmt.bindString(4, coverOrigin);
        }
 
        String coverSmall = entity.getCoverSmall();
        if (coverSmall != null) {
            stmt.bindString(5, coverSmall);
        }
 
        String coverMiddle = entity.getCoverMiddle();
        if (coverMiddle != null) {
            stmt.bindString(6, coverMiddle);
        }
 
        String coverLarge = entity.getCoverLarge();
        if (coverLarge != null) {
            stmt.bindString(7, coverLarge);
        }
 
        String coverWebLarge = entity.getCoverWebLarge();
        if (coverWebLarge != null) {
            stmt.bindString(8, coverWebLarge);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(9, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(10, updatedAt.getTime());
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(11, uid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(12, nickname);
        }
 
        Boolean isVerified = entity.getIsVerified();
        if (isVerified != null) {
            stmt.bindLong(13, isVerified ? 1L: 0L);
        }
 
        String avatarPath = entity.getAvatarPath();
        if (avatarPath != null) {
            stmt.bindString(14, avatarPath);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(15, intro);
        }
 
        String introRich = entity.getIntroRich();
        if (introRich != null) {
            stmt.bindString(16, introRich);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(17, tags);
        }
 
        Integer shares = entity.getShares();
        if (shares != null) {
            stmt.bindLong(18, shares);
        }
 
        Boolean hasNew = entity.getHasNew();
        if (hasNew != null) {
            stmt.bindLong(19, hasNew ? 1L: 0L);
        }
 
        Boolean isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindLong(20, isFavorite ? 1L: 0L);
        }
 
        Integer playTimes = entity.getPlayTimes();
        if (playTimes != null) {
            stmt.bindLong(21, playTimes);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(22, status);
        }
 
        Integer serializeStatus = entity.getSerializeStatus();
        if (serializeStatus != null) {
            stmt.bindLong(23, serializeStatus);
        }
 
        Integer serialState = entity.getSerialState();
        if (serialState != null) {
            stmt.bindLong(24, serialState);
        }
 
        Integer playTrackId = entity.getPlayTrackId();
        if (playTrackId != null) {
            stmt.bindLong(25, playTrackId);
        }
 
        Boolean isRecordDesc = entity.getIsRecordDesc();
        if (isRecordDesc != null) {
            stmt.bindLong(26, isRecordDesc ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlbumEntity readEntity(Cursor cursor, int offset) {
        AlbumEntity entity = new AlbumEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // albumId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // categoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverOrigin
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverSmall
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // coverMiddle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // coverLarge
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coverWebLarge
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // createdAt
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // updatedAt
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // uid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // nickname
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isVerified
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // avatarPath
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // intro
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // introRich
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tags
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // shares
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // hasNew
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isFavorite
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // playTimes
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // status
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // serializeStatus
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // serialState
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // playTrackId
            cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0 // isRecordDesc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlbumEntity entity, int offset) {
        entity.setAlbumId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverOrigin(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverSmall(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoverMiddle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCoverLarge(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoverWebLarge(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdatedAt(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUid(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setNickname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsVerified(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setAvatarPath(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIntro(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIntroRich(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTags(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShares(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setHasNew(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setIsFavorite(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setPlayTimes(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setStatus(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setSerializeStatus(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setSerialState(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setPlayTrackId(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIsRecordDesc(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlbumEntity entity, long rowId) {
        entity.setAlbumId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlbumEntity entity) {
        if(entity != null) {
            return entity.getAlbumId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
